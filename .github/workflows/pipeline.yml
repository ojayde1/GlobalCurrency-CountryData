name: CI/CD Pipeline to EKS

on:
  push:
    branches: [ main ] # Triggers on push to the main branch
  pull_request:
    branches: [ main ] # Triggers on pull requests to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Uses a GitHub-hosted Ubuntu runner

    permissions:
      id-token: write # Required for aws-actions/configure-aws-credentials with OIDC
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3 # Checks out your repository's code into the runner's workspace

    - name: Configure AWS credentials
      # This action sets up AWS CLI credentials and handles ECR login, and prepares for EKS.
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1 # Your AWS region

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }} # Your ECR repository name (e.g., globalcurrency-countrydata-app)
        IMAGE_TAG: ${{ github.sha }} # Use commit SHA as image tag for uniqueness
      run: |
        echo "Building Docker imageat $(date)..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest # Also tag as latest

        echo "Pushing Docker image to ECRat $(date)..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Set up kubectl for EKS
      # This action configures kubectl to interact with your EKS cluster
      uses: aws-actions/amazon-eks-setup@v1
      with:
        cluster-name: globalcurrency-countrydata-cluster # Your EKS cluster name (from Terraform)
        aws-region: eu-west-1 # Your AWS region

    - name: Deploy to EKS
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Applying Kubernetes manifests to EKS at $(date)..." 
        # Update the image in your deployment.yml to use the ECR image
        # This assumes your deployment.yml has a container named 'globalcurrency-countrydata-app'
        kubectl set image deployment/globalcurrency-countrydata-deployment globalcurrency-countrydata-app=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --record

        echo "Applying Kubernetes service manifest to EKS (type LoadBalancer)at $(date)..."
        kubectl apply -f service.yml

        echo "Waiting for globalcurrency-countrydata deployment to be readyat $(date)..."
        kubectl rollout status deployment/globalcurrency-countrydata-deployment

        echo "Getting EKS LoadBalancer URLat $(date)..."
        # Wait for the LoadBalancer to be provisioned and get its external IP
        kubectl get service globalcurrency-countrydata-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'
        echo "" # Add a newline for cleaner output

        echo "Deployment to EKS successful at $(date)! "