name: CI/CD Pipeline 

on:
  push:
    branches: [ main ] # Triggers on push to the main branch
  pull_request:
    branches: [ main ] # Triggers on pull requests to the main branch

jobs:
  build-and-deploy: # This single job handles everything: checkout, deploy setup, build, and Kubernetes deployment
    runs-on: ubuntu-latest # Uses a GitHub-hosted Ubuntu runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v3 # Checks out your repository's code into the runner's workspace

    - name: Configure AWS credentials
      # This action sets up AWS CLI credentials on the runner.
      # While not directly used for deployment commands here (SSH is used),
      # it's good practice if you have other AWS CLI interactions.
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1 # Make sure this matches your EC2 instance's region

    - name: Connect to EC2 instance and Deploy to Kubernetes
      run: |
        echo "Starting 'Connect to EC2 instance and Deploy to Kubernetes' step at $(date)"

        # Create a temporary file for the SSH private key from GitHub secrets
        echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
        # Set restrictive permissions on the private key for security
        chmod 600 private_key.pem

        # Define the application directory on the EC2 instance.
        # This MUST match the exact directory name on your EC2 instance (all lowercase, hyphens).
        APP_DIR="/home/${{ secrets.SERVER_USERNAME }}/globalcurrency-countrydata-app"

        echo "Attempting initial SSH to clean and create app directory on EC2 at $(date)"
        # SSH into the EC2 instance to clean and create the app directory
        # -o StrictHostKeyChecking=no bypasses the host key check for CI (use with caution)
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "rm -rf $APP_DIR && mkdir -p $APP_DIR"
        echo "Initial SSH complete at $(date)"

        echo "Starting SCP file transfer from runner to EC2 at $(date)"
        # Securely copy all project files from the runner to the EC2 instance's app directory
        scp -i private_key.pem -o StrictHostKeyChecking=no -r . ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}:$APP_DIR/
        echo "SCP file transfer complete at $(date)"

        # --- DEBUGGING ADDITION: Verify files copied to target directory after SCP ---
        echo "Verifying files copied to $APP_DIR on EC2 (after SCP) at $(date)"
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "ls -F $APP_DIR"
        echo "Verification complete at $(date)"
        # --- END DEBUGGING ADDITION ---

        echo "Starting SSH for Docker build and Kubernetes deployment at $(date)"
        ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} << 'EOF'
          # Enable shell debugging to see every command executed
          set -x

          echo "Inside EC2 SSH session: Navigating to app directory at $(date)"
          # Add error handling for cd to make sure it succeeds
          cd "$APP_DIR" || { echo "ERROR: Failed to change directory to $APP_DIR. Exiting SSH session."; exit 1; }
          echo "Inside EC2 SSH session: cd command executed. Current working directory is $(pwd) at $(date)"

          echo "Inside EC2 SSH session: Listing contents of current directory (after cd) at $(date)"
          ls -F
          echo "Inside EC2 SSH session: Directory listing complete at $(date)"

          echo "Inside EC2 SSH session: Starting Minikube at $(date)"
          # IMPORTANT: Start Minikube. You might need to specify a driver if not default.
          # For EC2, 'docker' driver is common if Docker is installed.
          # You might also want to allocate more resources if your EC2 instance has them:
          # minikube start --driver=docker --memory=4096mb --cpus=2
          minikube start --driver=docker # This line is crucial!
          echo "Inside EC2 SSH session: Minikube started at $(date)"

          echo "Inside EC2 SSH session: Building Docker image for globalcurrency-countrydata-app locally on EC2 at $(date)"
          # Build the Docker image on the EC2 instance
          # Tag the image with your Docker Hub username and app name
          docker build -t ojayde35/globalcurrency-countrydata-app:latest .
          echo "Inside EC2 SSH session: Docker image built at $(date)"

          echo "Inside EC2 SSH session: Loading image into Minikube at $(date)"
          # Load the locally built Docker image directly into Minikube's Docker daemon
          minikube image load ojayde35/globalcurrency-countrydata-app:latest
          echo "Inside EC2 SSH session: Image loaded into Minikube at $(date)"

          echo "Inside EC2 SSH session: Applying Kubernetes manifests at $(date)"
          # Apply your Kubernetes Deployment and Service YAML files
          # These files (deployment.yml, service.yml) MUST be in your repository root
          kubectl apply -f deployment.yml
          kubectl apply -f service.yml
          echo "Inside EC2 SSH session: Kubernetes manifests applied at $(date)"

          echo "Inside EC2 SSH session: Waiting for globalcurrency-countrydata deployment to be ready at $(date)"
          # Wait for the Kubernetes deployment to become ready
          kubectl rollout status deployment/globalcurrency-countrydata-deployment # Adjust deployment name if different in deployment.yml

          echo "Inside EC2 SSH session: Getting Minikube service URL for globalcurrency-countrydata-app at $(date)"
          # Get the URL of your deployed service (output will appear in GitHub Actions logs)
          minikube service globalcurrency-countrydata-service --url # Adjust service name if different in service.yml

          echo "Deployment to Minikube on EC2 successful!!"
        EOF

        echo "SSH for Docker build and Kubernetes deployment complete at $(date)"
        # Clean up the temporary SSH private key from the GitHub Actions runner
        rm -f private_key.pem
        echo "Finished 'Connect to EC2 instance and Deploy to Kubernetes' step at $(date)"
